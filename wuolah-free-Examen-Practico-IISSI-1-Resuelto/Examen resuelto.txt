LOS EXAMENES POR NORMA GENERAL SON SIEMPRE IGUALES, VARIAN EL DATO QUE QUIERES QUE ESCOJAS.


1.- SELECT count(*) FROM Students;

2.- 
CREATE TABLE InternalStudents(
InternalStudentId INT NOT NULL AUTO_INCREMENT,
departmentId INT NOT NULL,
studentId INT NOT NULL,
academicYear INT NOT NULL,
months INT,
PRIMARY KEY(InternalStudentId),
FOREIGN KEY(studentId) REFERENCES Students(studentId),
FOREIGN KEY(departmentId) REFERENCES
Departments(departmentId),
CONSTRAINT invalidNumberOfMonths CHECK (months >= 3 AND
months <=9),
UNIQUE(studentId, academicYear)
);

3.-
DELIMITER //
CREATE OR REPLACE PROCEDURE pInsertInterns()
BEGIN
INSERT INTO internalStudents(departmentId, studentId, academicYear,
months) VALUES (1,1,2019,3),
(1,1,2020,6),
(1,2,2019,NULL);
END//
DELIMITER ;

4.-
DELIMITER //
CREATE OR REPLACE PROCEDURE pInsertInterns()
BEGIN
INSERT INTO internalStudents(departmentId, studentId, academicYear,
months) VALUES (1,1,2019,3),
(1,1,2020,6),
(1,2,2019,NULL);
END//
DELIMITER ;
DELIMITER //
CREATE OR REPLACE PROCEDURE pUpdateInterns(s INT, d INT)
BEGIN
UPDATE InternalStudents SET months=d WHERE internalStudentId=s;
END//
CREATE OR REPLACE PROCEDURE pDeleteInterns(s INT)
BEGIN
DELETE FROM InternalStudents WHERE studentId = s;
END//
DELIMITER ;

5.-
SELECT p.firstName, g.name, tl.credits FROM professors P, groups G,
teachingLoads tl WHERE p.professorId = tl.professorId AND g.groupId =
tl.groupId;

6.-
SELECT tutoringhoursId FROM appointments;

7.-
SELECT firstName, surname FROM professors p, offices o WHERE
p.officeId=o.officeId AND o.floor = 0;

8.-
CREATE OR REPLACE VIEW notasAlumnoMetodo AS (SELECT accessMethod,
VALUE FROM Students s, grades g WHERE g.studentId = s.studentId);
SELECT * FROM notasAlumnoMetodo;
SELECT accessMethod, AVG(VALUE) FROM notasAlumnoMetodo GROUP
BY(accessMethod);

9.-
CREATE OR REPLACE VIEW gradesPerStudents AS (SELECT s.studentId,
firstName, surname, VALUE FROM Students s, Grades g WHERE g.studentId
= s.studentId);
SELECT firstName, surname, AVG(VALUE), MIN(VALUE) FROM
gradesPerStudents GROUP BY studentId ORDER BY AVG(VALUE) DESC LIMIT 2;